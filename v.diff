diff --git a/python3/vimini/main.py b/python3/vimini/main.py
--- a/python3/vimini/main.py
+++ b/python3/vimini/main.py
@@ -1,9 +1,12 @@
 import vim
-import os, json, subprocess, tempfile, shlex, textwrap
+import os, json, subprocess, tempfile, shlex, textwrap, uuid
 from google.genai import types
 from vimini import util
 from vimini.autocomplete import autocomplete, cancel_autocomplete, process_autocomplete_queue
 
+# Global data store to exchange data between python calls without using vim variables for large data.
+_VIMINI_DATA_STORE = {}
+
 def initialize(api_key, model, logfile=None):
     """
     Initializes the plugin with the user's API key, model name, and
@@ -209,8 +212,13 @@
         vim.command('file Vimini Diff')
         vim.command('setlocal buftype=nofile filetype=diff noswapfile')
         diff_buffer = vim.current.buffer
-        vim.command(f"let b:vimini_files_to_apply = {json.dumps(files_to_process)}")
-        vim.command(f"let b:vimini_project_root = '{project_root}'")
+
+        data_key = str(uuid.uuid4())
+        _VIMINI_DATA_STORE[data_key] = {
+            'files_to_apply': files_to_process,
+            'project_root': project_root
+        }
+        vim.command(f"let b:vimini_data_key = '{data_key}'")
 
         combined_diff_output = []
         for file_op in files_to_process:
@@ -662,15 +670,19 @@
         util.display_message("`Vimini Diff` buffer not found. Was :ViminiCode run?", error=True)
         return
 
-    files_to_apply_str = vim.eval(f"getbufvar({diff_buffer.number}, 'vimini_files_to_apply', '')")
-    project_root = vim.eval(f"getbufvar({diff_buffer.number}, 'vimini_project_root', '')")
+    data_key = vim.eval(f"getbufvar({diff_buffer.number}, 'vimini_data_key', '')")
+    if not data_key:
+        util.display_message("Could not find data key in `Vimini Diff` buffer.", error=True)
+        return
 
-    if not files_to_apply_str or not project_root:
-        util.display_message("Could not find file data in `Vimini Diff` buffer.", error=True)
+    stored_data = _VIMINI_DATA_STORE.get(data_key)
+    if not stored_data:
+        util.display_message("Could not find data associated with the key. It may have expired or been cleared.", error=True)
         return
 
     try:
-        files_to_apply = json.loads(files_to_apply_str[0])
+        files_to_apply = stored_data['files_to_apply']
+        project_root = stored_data['project_root']
         modified_files = []
 
         for file_op in files_to_apply:
@@ -712,8 +724,11 @@
         if modified_files:
             util.display_message(f"Applied changes to: {', '.join(modified_files)}", history=True)
 
-    except (json.JSONDecodeError, os.error) as e:
+    except (KeyError, os.error) as e:
         util.display_message(f"Error applying changes: {e}", error=True)
+    finally:
+        if data_key in _VIMINI_DATA_STORE:
+            del _VIMINI_DATA_STORE[data_key]
 
 def append_code():
     """
@@ -776,4 +791,3 @@
         vim.command(f"bdelete! {thoughts_buffer.number}")
 
     util.display_message(f"Appended code to `{original_buffer_name}`.", history=True)
-
